on:
  push:
    # To limit building on some branches.
    # branches: [ deploy ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  APP_VERSION: 0.2
  QT_VERSION: 5.15.2

jobs:
  # Custom user-defined name(s) for the job(s)
  packaging-linux:
    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md
    runs-on: ubuntu-20.04

    steps:
      # Checks-out under $GITHUB_WORKSPACE. See https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{env.QT_VERSION}}
          modules: qtcharts
          aqtversion: '==2.0.2'
          cached: ${{steps.cache-qt.outputs.cache-hit}}

      - name: Configure
        run: |
          qmake CONFIG+=release PREFIX=/usr QMAKE_CC=gcc-10 QMAKE_CXX=g++-10
      - name: Compile
        # 2 CPUs, according to https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        run: make -j2
      - name: Install linuxdeploy
        run: |
          cd src
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
      - name: Create AppImage
        run: |
          cd src
          ./linuxdeploy-x86_64.AppImage --appdir AppDir -e ../bin/moebiustoolkit -d moebiustoolkit.desktop -i moebiustoolkit.png --plugin qt --output appimage
          rm linuxdeploy-*
          ls *.AppImage
          mv *.AppImage MoebiusToolkit-${{env.APP_VERSION}}.AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v2
        with:
          name: MoebiusToolkit-${{env.APP_VERSION}}.AppImage
          path: src/MoebiusToolkit-${{env.APP_VERSION}}.AppImage
          if-no-files-found: error

  packaging-mac:
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{env.QT_VERSION}}
          modules: qtcharts
          aqtversion: '==2.0.2'
          cached: ${{steps.cache-qt.outputs.cache-hit}}

      - name: Build
        run: |
          qmake CONFIG+=release
          make -j3

      - name: Deploy app
        run: |
          ls -l
          ls -l bin
          macdeployqt bin/MoebiusToolkit.app
          macdeployqt bin/MoebiusToolkit.app -dmg
          mv bin/MoebiusToolkit.app MoebiusToolkit-${{env.APP_VERSION}}.app
          mv bin/MoebiusToolkit.dmg MoebiusToolkit-${{env.APP_VERSION}}.dmg

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: MoebiusToolkit-${{env.APP_VERSION}}.dmg
          path: MoebiusToolkit-${{env.APP_VERSION}}.dmg

      - name: Upload app bundle
        uses: actions/upload-artifact@v2
        with:
          name: MoebiusToolkit-${{env.APP_VERSION}}.app
          path: MoebiusToolkit-${{env.APP_VERSION}}.app

# vim: set et ts=2 sw=2:
